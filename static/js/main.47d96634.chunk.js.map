{"version":3,"sources":["components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["navbar","Nav","className","id","Dropdown","Toggle","Menu","class","for","type","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAGqBA,E,iLAEb,OACI,kBAACC,EAAA,EAAD,CAAKC,UAAU,kBAAkBC,GAAG,SAChC,kBAACC,EAAA,EAAD,KACI,yBAAKF,UAAU,OACX,kBAACE,EAAA,EAASC,OAAV,cAIA,kBAACD,EAAA,EAASE,KAAV,CAAeJ,UAAU,iBACrB,0BAAMA,UAAU,aACZ,yBAAKK,MAAM,cACP,2BAAOC,IAAI,6BAAX,wBACA,2BAAOC,KAAK,QAAQF,MAAM,eAAeJ,GAAG,4BAA4BO,YAAY,uBAExF,yBAAKR,UAAU,cACX,2BAAOM,IAAI,gCAAX,SACA,2BAAOC,KAAK,WAAWF,MAAM,eAAeJ,GAAG,+BAA+BO,YAAY,WAE9F,yBAAKR,UAAU,cACX,2BAAOO,KAAK,WAAWF,MAAM,mBAAmBJ,GAAG,kBACnD,2BAAOD,UAAU,mBAAmBM,IAAI,iBAAxC,gBAIJ,4BAAQC,KAAK,SAASP,UAAU,mBAAhC,cAQhB,kBAACE,EAAA,EAAD,KACI,yBAAKF,UAAU,OACP,kBAACE,EAAA,EAASC,OAAV,qBAIA,kBAACD,EAAA,EAASE,KAAV,CAAeJ,UAAU,0BACrB,0BAAMA,UAAU,aACZ,yBAAKK,MAAM,cACP,2BAAOC,IAAI,gBAAX,iBACA,2BAAOD,MAAM,eAAeJ,GAAG,OAAOO,YAAY,+BAEtD,yBAAKH,MAAM,cACP,2BAAOC,IAAI,gBAAX,eACA,2BAAOD,MAAM,eAAeJ,GAAG,OAAOO,YAAY,6BAEtD,yBAAKH,MAAM,cACP,2BAAOC,IAAI,sBAAX,wBACA,2BAAOC,KAAK,QAAQF,MAAM,eAAeJ,GAAG,qBAAqBO,YAAY,uBAEjF,yBAAKR,UAAU,cACX,2BAAOM,IAAI,yBAAX,SACA,2BAAOC,KAAK,WAAWF,MAAM,eAAeJ,GAAG,wBAAwBO,YAAY,WAGvF,4BAAQD,KAAK,SAASP,UAAU,mBAAhC,yB,GA3DAS,a,MCcrBC,MAZf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,iBCGJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.47d96634.chunk.js","sourcesContent":["import { Navbar, Form, FormControl, Button, Nav, NavDropdown, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport React, {Component} from 'react';\r\n\r\nexport default class navbar extends Component {\r\n    render () {\r\n        return (\r\n            <Nav className=\"justify-content\" id=\"mynav\">\r\n                <Dropdown>\r\n                    <div className=\"btn\">\r\n                        <Dropdown.Toggle>\r\n                            Login\r\n                        </Dropdown.Toggle>\r\n                    \r\n                        <Dropdown.Menu className=\"dropdown-menu\">\r\n                            <form className=\"px-4 py-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"exampleDropdownFormEmail1\">Endereço de email</label>\r\n                                    <input type=\"email\" class=\"form-control\" id=\"exampleDropdownFormEmail1\" placeholder=\"email@exemplo.com\"/>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label for=\"exampleDropdownFormPassword1\">Senha</label>\r\n                                    <input type=\"password\" class=\"form-control\" id=\"exampleDropdownFormPassword1\" placeholder=\"Senha\"/>\r\n                                </div>\r\n                                <div className=\"form-check\">\r\n                                    <input type=\"checkbox\" class=\"form-check-input\" id=\"dropdownCheck\"/>\r\n                                    <label className=\"form-check-label\" for=\"dropdownCheck\">\r\n                                        Remember me\r\n                                    </label>\r\n                                </div>\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Entrar</button>\r\n                            </form>\r\n                            \r\n                        </Dropdown.Menu>\r\n                    </div>\r\n\r\n                    \r\n                </Dropdown>\r\n                <Dropdown>\r\n                    <div className=\"btn\">\r\n                            <Dropdown.Toggle>\r\n                                Cadastrar-se\r\n                            </Dropdown.Toggle>\r\n                        \r\n                            <Dropdown.Menu className=\"dropdown-menu-cadastro\">\r\n                                <form className=\"px-4 py-3\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"DropdownNome\">Nome Completo</label>\r\n                                        <input class=\"form-control\" id=\"Nome\" placeholder=\"Coloque seu nome completo\"/>\r\n                                    </div>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"DropdownNome\">Endereço</label>\r\n                                        <input class=\"form-control\" id=\"Nome\" placeholder=\"Coloque seu endereço\"/>\r\n                                    </div>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"DropdownFormEmail1\">Endereço de email</label>\r\n                                        <input type=\"email\" class=\"form-control\" id=\"DropdownFormEmail1\" placeholder=\"email@exemplo.com\"/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"DropdownFormPassword1\">Senha</label>\r\n                                        <input type=\"password\" class=\"form-control\" id=\"DropdownFormPassword1\" placeholder=\"Senha\"/>\r\n                                    </div>\r\n                                    \r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Cadastrar-se</button>\r\n                                </form>\r\n                                \r\n                            </Dropdown.Menu>\r\n                    </div>\r\n                    </Dropdown>\r\n             </Nav>                    \r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/navbar.js'\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar/>\r\n      <header className=\"App-header\">\r\n          \r\n      </header>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}